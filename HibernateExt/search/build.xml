<!--

  Hibernate Annotations ANT build script.

  You need JDK 5.0 installed to build Hibernate Annotations.

-->

<project name="Hibernate Search" default="dist" basedir=".">

	<!-- Give user a chance to override without editing this file
		   (and without typing -D each time it compiles it) -->
	<property file="build.properties"/>
	<property file="${user.home}/.ant.properties"/>

	<!-- Name of project and version, used to create filenames -->
	<property name="Name" value="Hibernate Search"/>
	<property name="name" value="hibernate-search"/>
	<property name="version" value="3.2.2.beta1"/>
	<property name="javadoc.packagenames" value="org.hibernate.search.*"/>
	<property name="copy.test" value="true"/>
	<property name="javac.source" value="1.5"/>
	<property name="javac.target" value="1.5"/>
    <property name="jdbc.dir" value="jdbc"/>
    <property name="common.dir" value="${basedir}/../common"/>

    <property name="jpa-api.jar" value="${basedir}/../jpa-api/build/ejb3-persistence.jar"/>
	<property name="annotations.jar"
			  value="${basedir}/../annotations/target/hibernate-annotations/hibernate-annotations.jar"/>
	<property name="commons-annotations.jar"
			  value="${basedir}/../commons-annotations/target/hibernate-commons-annotations/hibernate-commons-annotations.jar"/>

	<import file="${common.dir}/common-build.xml"/>

    
    <property name="build.testresources.dir" value="${build.dir}/testresources"/>
    <property name="testresources.dir" value="${basedir}/src/test-resources"/>

    <!-- override order for JBossXB to bootstrap properly -->
    <path id="junit.classpath">
           <fileset dir="${lib.dir}">
                 <include name="*.jar"/>
           </fileset>
           <pathelement path="${classes.dir}"/>
           <pathelement path="${testclasses.dir}"/>
           <path refid="junit.moduleclasspath"/>
           <path refid="lib.class.path"/>
           <path location="${clover.jar}"/>
    </path>
    <!-- override order for JBossXB to bootstrap properly -->
    <path id="lib.class.path">
    	<path location="${hibernate-core.jar}"></path>
        <fileset dir="${hibernate-core.lib.dir}">
            <include name="*.jar"/>
            <exclude name="xml-apis.jar"/>
            <exclude name="xerces*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
		<path refid="lib.moduleclass.path"/>
		<pathelement path="${clover.jar}"/>
    </path>


    <path id="lib.moduleclass.path">
		<pathelement location="${jpa-api.jar}"/>
		<pathelement location="${commons-annotations.jar}"/>
	</path>
	<path id="junit.moduleclasspath">
        <!-- order matters for JBoss XB proper bootstrap -->
        <fileset dir="${lib.dir}/test">
			<include name="*.jar"/>
			<include name="*.zip"/>
		</fileset>
        <pathelement location="${src.dir}"/>
		<pathelement location="${test.dir}"/>
		<pathelement location="${annotations.jar}"/>
		<fileset dir="${jdbc.dir}">
			<include name="*.jar"/>
			<include name="*.zip"/>
		</fileset>
	</path>

    <target name="init">
		<antcall target="common-build.init"/>
		<!-- check for dependency artefacts -->
		<available file="${jpa-api.jar}" type="file" property="jpa-api.jar.available"/>
		<available file="${commons-annotations.jar}" type="file" property="commons-annotations.jar.available"/>
		<available file="${annotations.jar}" type="file" property="annotations.jar.available"/>
        <mkdir dir="${lib.dir}/test"/>
        <mkdir dir="${build.testresources.dir}"/>
    </target>

	<target name="get.jpa-api" depends="init" unless="jpa-api.jar.available">
		<ant inheritall="false" dir="${basedir}/../jpa-api" target="clean"/>
		<ant inheritall="false" dir="${basedir}/../jpa-api" target="jar"/>
	</target>

	<target name="get.commons-annotations" depends="init" unless="commons-annotations.jar.available">
		<ant inheritall="false" dir="${basedir}/../commons-annotations" target="clean"/>
		<ant inheritall="false" dir="${basedir}/../commons-annotations" target="jar"/>
	</target>

	<target name="get.annotations" depends="init" unless="annotations.jar.available">
		<ant inheritall="false" dir="${basedir}/../annotations" target="clean"/>
		<ant inheritall="false" dir="${basedir}/../annotations" target="jar"/>
	</target>

	<target name="compile" depends="init,get.commons-annotations" description="Compile the Java source code">
		<available
				classname="org.eclipse.core.launcher.Main"
				property="build.compiler"
				value="org.eclipse.jdt.core.JDTCompilerAdapter"
				classpath="${java.class.path}"/>
		<javac
				srcdir="${src.dir}"
				destdir="${classes.dir}"
				classpathref="lib.class.path"
				debug="${javac.debug}"
				optimize="${javac.optimize}"
				nowarn="on"
                source="${javac.source}"
                target="${javac.target}">
			<src path="${src.dir}"/>
		</javac>
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
				<include name="**/resources/*.properties"/>
				<include name="**/*.xsd"/>
			</fileset>
		</copy>
	</target>

	<target name="compiletest" depends="init,get.jpa-api,get.annotations,compile" description="Compile the tests">
		<available
				classname="org.eclipse.core.launcher.Main"
				property="build.compiler"
				value="org.eclipse.jdt.core.JDTCompilerAdapter"
				classpath="${java.class.path}"/>
		<javac
				destdir="${testclasses.dir}"
				classpathref="junit.classpath"
				debug="${javac.debug}"
				optimize="${javac.optimize}"
				nowarn="on"
                source="${javac.source}"
                target="${javac.target}">
			<src refid="testsrc.path"/>
		</javac>
	</target>

    <target name="prepare-test-resources" depends="compiletest">
        <copy todir="${build.testresources.dir}">
            <fileset dir="${testresources.dir}">
                <include name="**/*.*"/>
            </fileset>
        </copy>
        <mkdir dir="${build.testresources.dir}/jars"/>
        <jar filesetmanifest="merge" jarfile="${build.testresources.dir}/jars/jms-slave.jar" >
            <fileset dir="${testclasses.dir}">
                <include name="org/hibernate/search/test/jms/slave/**.*"/>
            </fileset>
        </jar>
        <jar filesetmanifest="merge" jarfile="${build.testresources.dir}/jars/jms-master.jar" >
            <fileset dir="${testclasses.dir}">
                <include name="org/hibernate/search/test/jms/master/**.*"/>
            </fileset>
        </jar>
    </target>

    <target name="junit" depends="compiletest, prepare-test-resources">
        <mkdir dir="test_output"/>
        <junit forkmode="once" printsummary="yes" haltonfailure="yes">
            <classpath>
                <path path="${build.testresources.dir}"/>
                <!-- dirset dir="${build.testresources.dir}">
                    <include name="**/*.jar"/>
                    <include name="**/*.par"/>
                </dirset -->
                <path refid="junit.classpath"/>
                
                <fileset dir="${jdbc.dir}">
                    <include name="**/*.jar"/>
                    <include name="**/*.zip"/>
                </fileset>
            </classpath>
            <formatter type="plain"/>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="test_output" haltonfailure="no">
            	<fileset refid="junit.batchtestset"/>
            </batchtest>
        </junit>
    </target>

	<!-- Run a single unit test. -->
	<target name="junitsingle" depends="compiletest"
			description="Run a single test suite (requires testname and jdbc.driver properties)">
		<mkdir dir="test_output"/>
		<junit printsummary="yes" fork="yes" haltonfailure="yes">
			<classpath>
				<fileset dir="${jdbc.dir}">
					<include name="**/*.jar"/>
					<include name="**/*.zip"/>
				</fileset>
				<path refid="lib.class.path"/>
				<pathelement path="${classes.dir}"/>
				<pathelement path="${src.dir}"/>
				<!-- pick up properties from here -->
				<pathelement path="${test.dir}"/>
				<!-- pick up mappings from here -->
			</classpath>
			<formatter type="plain"/>
			<formatter type="xml"/>
			<test fork="yes" todir="test_output" haltonfailure="no" name="${testname}"/>
		</junit>
	</target>

	<!-- target name="report">
			<mkdir dir="test_output"/>
			<junitreport todir="test_output">
			  <fileset dir="test_output">
				<include name="TEST-*.xml"/>
			  </fileset>
			  <report format="frames" todir="test_output/report"/>
			</junitreport>
		</target -->

	<target name="jar" depends="compile" description="Build the distribution .jar file">
		<mkdir dir="${classes.dir}/META-INF"/>
		<manifest file="${classes.dir}/META-INF/MANIFEST.MF">
			<attribute name="Product" value="${Name}"/>
			<attribute name="Version" value="${version}"/>
		</manifest>
		<antcall target="common-build.jar"/>
	</target>

	<!-- target name="javadoc" description="Compile the Javadoc API documentation to dist dir">
				<echo>Skipping java doc since ant's javadoc task cannot handle an alternative javadoc</echo>
		 </target -->


	<!-- Some of this can probably be moved to common-build... -->
	<target name="dist" depends="jar,javadoc,copysource,copytest,copylib,extras"
			description="Build everything">

		<ant inheritall="false" dir="${basedir}/doc/reference"/>
		<copy todir="${dist.dir}/doc/reference" failonerror="false">
			<fileset dir="${basedir}/doc/reference/build">
				<include name="**/*.*"/>
			</fileset>
		</copy>

		<copy todir="${dist.dir}" failonerror="false">
			<fileset dir="${common.dir}">
				<include name="common-build.xml"/>
			</fileset>
		</copy>

        <!-- copy dependencies -->
        <copy todir="${dist.lib.dir}" failonerror="false">
			<fileset file="${jpa-api.jar}"/>
            <fileset file="${commons-annotations.jar}"/>
        </copy>
        <mkdir dir="${dist.lib.dir}/test"/>
        <copy todir="${dist.lib.dir}/test" failonerror="false">
			<fileset file="${annotations.jar}"/>
        </copy>

        <copy file="${basedir}/build.properties.dist" tofile="${dist.dir}/build.properties" failonerror="false">
		</copy>
		<antcall target="common-build.dist"/>
	</target>

    <target name="zip-dist" description="zip the dist">
		<zip zipfile="${dist.dir}-${version}.zip">
			<zipfileset prefix="${name}-${version}" dir="${dist.dir}"/>
		</zip>
		<tar compression="gzip" tarfile="${dist.dir}-${version}.tar.gz">
			<tarfileset prefix="${name}-${version}" dir="${dist.dir}"/>
		</tar>
	</target>


</project>
